#!/bin/bash

# Written by Anagnostakis Ioannis GR Crete <rizitis@gmail.com> 03/2023
# This sqf2dep script can fork SBo repo and create package.dep and slack-required files if your package-manager need them...
# Also will find for you the packages that dependees on "$i"package in and print "dependees-on" files in SlackBuild folder
# After all you can use it as local repo or upload it as public if you can maintain it...
# In that case you should run this script minimum ones per week to update it. 
# LICENCE https://raw.githubusercontent.com/rizitis/sqf2dep/main/LICENSE
# Take the idea of script and make it better...



if [ "$EUID" -ne 0 ];then
echo "ROOT ACCESS PLEASE OR GO HOME..."
exit 1
fi

        cd $(dirname $0) ; CWD=$(pwd)
start_time=$(date +%s)
#*************************************************************************************************************************
# If you want to use ponce repo for Slackware-current, (I did it for this script), then create a file (or edit if exist) *
# /root/.sbopkg.conf                                                                                                     *
# add these 2 lines inside:                                                                                              *
# REPO_NAME=SBo-git                                                                                                      *
# REPO_BRANCH=current                                                                                                    *
#*************************************************************************************************************************

# synchronize sbopkg with remote repo 
sbopkg -r || exit
wait
# create for all packages that need deps a package.sqf file
sqg -a
wait
rm /var/lib/sbopkg/queues/Mumble* || true

# update local Slackware system database
/usr/bin/updatedb
wait
# create package.dep and slack-required files
dir=/tmp/sqf2dep
rm -r $dir
for i in $(ls /var/lib/sbopkg/queues/); do
mkdir -p $dir || exit
mkdir -p $dir/"$i" || exit
cat /var/lib/sbopkg/queues/"$i" > $dir/"$i"/"$i"
cat /var/lib/sbopkg/queues/"$i" > $dir/"$i"/slack-required
cd $dir || exit
rename 'sqf' 'dep' "$i"/*.sqf
rename '.sqf' '' "$i"
done

# create dependees-on 
cd $dir || exit
# Loop through all the directories in the current directory
for dirpath in */; do
    # Check if the slack-required file exists in the current directory
    if [ -f "$dirpath/slack-required" ]; then
        # Read the package names from the slack-required file
        package_names=$(cat "$dirpath/slack-required")
        
        # Loop through the package names and find the corresponding folders
        for package_name in $package_names; do
            for sub_dirpath in ./*; do
                if [ -d "$sub_dirpath" ] && [[ "$sub_dirpath" == *"$package_name"* ]]; then
                    # Write the folder name to the dependees-on file
                    echo "${dirpath%/}" >> "$sub_dirpath/dependees-on"
                fi
            done
        done
    fi
done

# Here I focuss to ponce repo , for the Slackware-stable slackbuilds repo following commands need a lot of edits...
repo=/tmp/slackbuilds-current
cd /tmp || exit
rm current.zip*
rm -r $repo
wget https://github.com/Ponce/slackbuilds/archive/refs/heads/current.zip
unzip current.zip
# Not needed any more
rm current.zip 
cd $repo || exit
# copy paste .dep and slack-required and dependees-on files to correct repo folders.
for i in $(ls /tmp/sqf2dep/); do
        if [[ -s "/tmp/sqf2dep/"$i"/slack-required" ]]
         then
          cp /tmp/sqf2dep/"$i"/dependees-on $repo/*/"$i"/
          cp /tmp/sqf2dep/"$i"/slack-required $repo/*/"$i"/
          cp /tmp/sqf2dep/"$i"/"$i".dep $repo/*/"$i"/
        fi
done


dir=/tmp/sqf2dep
repo=/tmp/slackbuilds-current
file=$repo/*/$i/
pattern='cd $PKG'
line='if [ -f $CWD\/slack-required ]; then cat $CWD\/slack-required > $PKG\/install\/slack-required; fi'
line2='if [ -f $CWD\/dependees-on ]; then cat $CWD\/dependees-on > $PKG\/install\/dependees-on; fi'
line3='if [ -f $CWD\/$PRGNAM.dep ]; then cp $CWD\/$PRGNAM.dep  $OUTPUT\/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.dep; fi'
cd $repo || exit 

shopt -s nullglob 


if [ ${#file[@]} -gt 0 ]
then 
find . -name "*.SlackBuild" -exec sed -i "s/$pattern/$line\n$pattern/g" {} \; 
wait
find . -name "*.SlackBuild" -exec sed -i "s/$pattern/$line2\n$pattern/g" {} \; 
wait
#find . -name  "*.SlackBuild" -exec sed -i -e '$aif [ -f $CWD\/$PRGNAM.dep ]; then cp $CWD\/$PRGNAM.dep  $OUTPUT\/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.dep; fi' {} \;
find . -name  "*.SlackBuild" -exec sed -i -e '$aif [ -f $CWD\/slack-required ]; then cp $CWD\/slack-required  $OUTPUT\/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.dep; fi' {} \;
wait
else 
echo "Oh my God, epic fail again..."
fi 

# fix slack-required, some packages have as dep it self :\ #
cd $repo || exit 

# Step 1: Find all folders recursively
find ./ -type d | while read dir; do
    # Step 2: Check if 'slack-required' file exists in the folder
    slack_required_file="$dir/slack-required"
    if [[ -f "$slack_required_file" ]]; then
        # Step 3: Get the name of the folder (without leading './')
        folder_name=$(basename "$dir")
        
        # Step 4: Remove lines in 'slack-required' containing the folder's name
        sed -i "/$folder_name/d" "$slack_required_file"
        
        echo "Removed lines containing '$folder_name' from '$slack_required_file'"
    fi
done

# Make new SLACKBUILDS.TXT using @bassmadrigal script https://www.linuxquestions.org/questions/slackware-14/script-for-building-a-slackbuilds-txt-4175598436/#post5661600
repo=/tmp/slackbuilds-current 
cd $repo || exit

# First add - replace patched folders ..
if [ -d "$CWD"/iotop ]; then
   rm -r system/iotop || true
   cp -R "$CWD"/iotop "$repo"/system/ || exit 10
fi

if [ -d "$CWD"/ktsuss ]; then
   rm -r system/ktsuss || true
   cp -R "$CWD"/ktsuss "$repo"/system/ || exit 20
fi

if [ -d "$CWD"/recode ]; then
   rm -r misc/recode || true
   cp -R "$CWD"/recode "$repo"/misc/ || exit 30
fi

if [ -d "$CWD"/yad ]; then
   rm -r desktop/yad || true
   cp -R "$CWD"/yad "$repo"/desktop/ || exit 40
fi 

if [ -d "$CWD"/yed ]; then
rm -r graphics/yed || true
cp -R "$CWD"/yed "$repo"/graphics/ || exit 50
fi 


# ADD personal SlackBuilds that not exist in SBo
if [ -d "$CWD"/rtz ]; then
cp -R "$CWD"/rtz "$repo"/ || exit 8
fi

# Prepare SLACKBUILDS.TXT
if [ ! -f "$CWD"/create-SLACKBUILDS_TXT ]; then
  wget -c https://raw.githubusercontent.com/rizitis/sqf2dep/main/create-SLACKBUILDS_TXT
else
  cp "$CWD"/create-SLACKBUILDS_TXT "$repo"/ || exit 60
fi

chmod +x create-SLACKBUILDS_TXT
bash create-SLACKBUILDS_TXT > SLACKBUILDS.TXT
wait
rm create-SLACKBUILDS_TXT*

# create BUILDS.TXT
if [ ! -f "$CWD"/BUILDS.bash ]; then
wget -c https://raw.githubusercontent.com/rizitis/sqf2dep/main/BUILDS.bash
else
cp "$CWD"/BUILDS.bash "$repo"/
fi

chmod +x BUILDS.bash
bash BUILDS.bash
wait
rm BUILDS.bash

end_time=$(date +%s)

elapsed_time=$(($end_time - $start_time))

echo ""
echo ""
echo "Elapsed time: $elapsed_time seconds"
